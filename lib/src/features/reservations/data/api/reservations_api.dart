import 'package:dio/dio.dart';
import 'package:retrofit/retrofit.dart';

// Import your data models.
// Make sure these models have .fromJson() and .toJson() methods,
// ideally generated by freezed or json_serializable.
import '../models/reservations_list_response.dart';
import '../models/reservation_response.dart';
import '../models/create_reservation_req.dart';
import '../models/delete_reservation_res.dart';
import '../models/update_reservation_req.dart';

// This is the generated file that Retrofit will create.
part 'reservations_api.g.dart';

@RestApi()
abstract class ReservationsApi {
  /// The factory constructor that allows Retrofit to generate the implementation.
  factory ReservationsApi(Dio dio, {String baseUrl}) = _ReservationsApi;

  /// List and count reservations.
  @GET('/admin/reservations')
  Future<ReservationsListResponse> list({
    @Queries() Map<String, dynamic>? query,
  });

  /// Create a reservation.
  @POST('/admin/reservations')
  Future<ReservationResponse> create({
    @Body() required CreateReservationReq payload,
    @Queries() Map<String, dynamic>? query,
  });

  /// Retrieve a specific reservation by its ID.
  @GET('/admin/reservations/{id}')
  Future<ReservationResponse> retrieve({
    @Path('id') required String id,
    @Queries() Map<String, dynamic>? query,
  });

  /// Update a reservation.
  @POST('/admin/reservations/{id}')
  Future<ReservationResponse> update({
    @Path('id') required String id,
    @Body() required UpdateReservationReq payload,
    @Queries() Map<String, dynamic>? query,
  });

  /// Delete a reservation.
  @DELETE('/admin/reservations/{id}')
  Future<DeleteReservationRes> delete({
    @Path('id') required String id,
    @Queries() Map<String, dynamic>? query,
  });
}
